class Solution(object):
    def isValidSudoku(self, board):
        """
        :type board: List[List[str]]
        :rtype: bool
        """
        boardSet = set()
        for i in range(len(board)):
            for j in range(len(board[i])):
                if(board[i][j] != '.'):
                    current = f'_{board[i][j]}_'
                    if(f'{i}{current}' in boardSet or f'{board[i][j]}{j}' in boardSet or f'{i//3}{current}{j//3}' in boardSet):
                        return False
                    else:
                        boardSet.add(f'{i}{current}')
                        boardSet.add(f'{board[i][j]}{j}')
                        boardSet.add(f'{i//3}{current}{j//3}')
        return True
    

board = [["5","3",".",".","7",".",".",".","."],
         ["6",".",".","1","9","5",".",".","."],
         [".","9","8",".",".",".",".","6","."],
         ["1",".",".",".","6",".",".",".","3"],
         ["4",".",".","8",".","3",".",".","1"],
         ["7",".",".",".","2",".",".",".","6"],
         [".","6",".",".",".",".","2","8","."],
         [".",".",".","4","1","9",".",".","5"],
         [".",".",".",".","8",".",".","7","9"]]

board =[[".",".","4",".",".",".","6","3","."],
 [".",".",".",".",".",".",".",".","."],
 ["5",".",".",".",".",".",".","9","."],
 [".",".",".","5","6",".",".",".","."],
 ["4",".","3",".",".",".",".",".","1"],
 [".",".",".","7",".",".",".",".","."],
[".",".",".","5",".",".",".",".","."],
[".",".",".",".",".",".",".",".","."],
[".",".",".",".",".",".",".",".","."]]

print(Solution().isValidSudoku(board))